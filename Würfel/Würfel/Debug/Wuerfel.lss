
Wuerfel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ef  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056f  00000000  00000000  0000082f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000208  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f6  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void) {
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	// Ports konfigurieren
	DDRA = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0;
  94:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;
  96:	88 bb       	out	0x18, r24	; 24
	DDRD = 0;
  98:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF;
  9a:	82 bb       	out	0x12, r24	; 18
	
	unsigned char table[] = {0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F}; // LED Tabelle
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	de 01       	movw	r26, r28
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	01 90       	ld	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	8a 95       	dec	r24
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
	int count = 0; // Zähler variable für den Index der Tabelle table
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
	
	// Program loop
	while (1) {
		if (PINB & 0x01) { // Wenn der Würfel aktiviert wurde
			//_delay_ms(10); // Warte 10ms
			PORTA = table[count % 6]; // Wähle eine Zahl aus der Tabelle
  b2:	06 e0       	ldi	r16, 0x06	; 6
  b4:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char table[] = {0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F}; // LED Tabelle
	int count = 0; // Zähler variable für den Index der Tabelle table
	
	// Program loop
	while (1) {
		if (PINB & 0x01) { // Wenn der Würfel aktiviert wurde
  b6:	b0 9b       	sbis	0x16, 0	; 22
  b8:	14 c0       	rjmp	.+40     	; 0xe2 <main+0x60>
			//_delay_ms(10); // Warte 10ms
			PORTA = table[count % 6]; // Wähle eine Zahl aus der Tabelle
  ba:	c9 01       	movw	r24, r18
  bc:	b8 01       	movw	r22, r16
  be:	0e 94 73 00 	call	0xe6	; 0xe6 <__divmodhi4>
  c2:	e1 e0       	ldi	r30, 0x01	; 1
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ec 0f       	add	r30, r28
  c8:	fd 1f       	adc	r31, r29
  ca:	e8 0f       	add	r30, r24
  cc:	f9 1f       	adc	r31, r25
  ce:	80 81       	ld	r24, Z
  d0:	8b bb       	out	0x1b, r24	; 27
			count++; // Inkrementiere count
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
			while (PIND & 0x01)  // Solange PD0 aktiviert ist mach nichts
  d6:	80 9b       	sbis	0x10, 0	; 16
  d8:	ee cf       	rjmp	.-36     	; 0xb6 <main+0x34>
				asm("NOP");
  da:	00 00       	nop
	while (1) {
		if (PINB & 0x01) { // Wenn der Würfel aktiviert wurde
			//_delay_ms(10); // Warte 10ms
			PORTA = table[count % 6]; // Wähle eine Zahl aus der Tabelle
			count++; // Inkrementiere count
			while (PIND & 0x01)  // Solange PD0 aktiviert ist mach nichts
  dc:	80 99       	sbic	0x10, 0	; 16
  de:	fd cf       	rjmp	.-6      	; 0xda <main+0x58>
  e0:	ea cf       	rjmp	.-44     	; 0xb6 <main+0x34>
				asm("NOP");
		} else { // andernfalls
			PORTA = 0; // Schalte alle LEDs aus
  e2:	1b ba       	out	0x1b, r1	; 27
  e4:	e8 cf       	rjmp	.-48     	; 0xb6 <main+0x34>

000000e6 <__divmodhi4>:
  e6:	97 fb       	bst	r25, 7
  e8:	07 2e       	mov	r0, r23
  ea:	16 f4       	brtc	.+4      	; 0xf0 <__divmodhi4+0xa>
  ec:	00 94       	com	r0
  ee:	07 d0       	rcall	.+14     	; 0xfe <__divmodhi4_neg1>
  f0:	77 fd       	sbrc	r23, 7
  f2:	09 d0       	rcall	.+18     	; 0x106 <__divmodhi4_neg2>
  f4:	0e 94 87 00 	call	0x10e	; 0x10e <__udivmodhi4>
  f8:	07 fc       	sbrc	r0, 7
  fa:	05 d0       	rcall	.+10     	; 0x106 <__divmodhi4_neg2>
  fc:	3e f4       	brtc	.+14     	; 0x10c <__divmodhi4_exit>

000000fe <__divmodhi4_neg1>:
  fe:	90 95       	com	r25
 100:	81 95       	neg	r24
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	08 95       	ret

00000106 <__divmodhi4_neg2>:
 106:	70 95       	com	r23
 108:	61 95       	neg	r22
 10a:	7f 4f       	sbci	r23, 0xFF	; 255

0000010c <__divmodhi4_exit>:
 10c:	08 95       	ret

0000010e <__udivmodhi4>:
 10e:	aa 1b       	sub	r26, r26
 110:	bb 1b       	sub	r27, r27
 112:	51 e1       	ldi	r21, 0x11	; 17
 114:	07 c0       	rjmp	.+14     	; 0x124 <__udivmodhi4_ep>

00000116 <__udivmodhi4_loop>:
 116:	aa 1f       	adc	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	a6 17       	cp	r26, r22
 11c:	b7 07       	cpc	r27, r23
 11e:	10 f0       	brcs	.+4      	; 0x124 <__udivmodhi4_ep>
 120:	a6 1b       	sub	r26, r22
 122:	b7 0b       	sbc	r27, r23

00000124 <__udivmodhi4_ep>:
 124:	88 1f       	adc	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	5a 95       	dec	r21
 12a:	a9 f7       	brne	.-22     	; 0x116 <__udivmodhi4_loop>
 12c:	80 95       	com	r24
 12e:	90 95       	com	r25
 130:	bc 01       	movw	r22, r24
 132:	cd 01       	movw	r24, r26
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
